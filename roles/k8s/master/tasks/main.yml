---
- name: 创建 k8s 证书目录、配置目录
  file:
    path: "{{ item }}"
    state: directory
  with_items:
   - "{{ etcd_pki_dir }}"
   - "{{ kube_dir }}/pki"
   - "{{ kube_dir }}"
   - ~/.kube

- name: 分发 kube-controller-manager、kube-scheduler kubeconfig 文件
  copy:
    src: "{{ localhost_dir }}/conf/{{ item }}"
    dest: "{{ kube_dir }}/{{ item }}"
    mode: 0600
  with_items:
    - controller-manager.kubeconf
    - scheduler.kubeconf

- name: 分发 admin kubeconfig 文件
  copy:
    src: "{{ localhost_dir }}/conf/admin.kubeconf"
    dest: ~/.kube/config
    mode: 0600

- name: 分发 kube-apiserver、kube-controller-manager、kube-scheduler service 文件
  template:
    src: "{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
    mode: 0644
  with_items:
    - kube-apiserver.service
    - kube-controller-manager.service
    - kube-scheduler.service

- name: 分发 kube-apiserver、kube-controller-manager、kube-scheduler、kubectl 二进制文件
  copy:
    src: "{{ localhost_dir }}/files/k8s-{{ kube_ver }}/{{ item }}"
    dest: "{{ kube_bin_dir }}/{{ item }}"
    mode: 0755
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
    - kubectl

- name: 分发 k8s apiserver 证书 
  copy:
    src: "{{ localhost_dir }}/pki/{{ item }}"
    dest: "{{ kube_dir }}/pki/{{ item }}"
    mode: 0600
  with_items:
   - ca.crt
   - ca.key
   - "apiserver-{{ node_name }}.crt"
   - "apiserver-{{ node_name }}.key"
   - apiserver-etcd-client.crt
   - apiserver-etcd-client.key
   - apiserver-kubelet-client.crt
   - apiserver-kubelet-client.key
   - front-proxy-ca.crt
   - front-proxy-ca.key
   - front-proxy-client.crt
   - front-proxy-client.key
   - sa.pub
   - sa.key

- name: 分发 etcd ca 证书 
  copy:
    src: "{{ localhost_dir }}/pki/etcd/ca.crt"
    dest: "{{ etcd_pki_dir }}/ca.crt"
    mode: 0600

- name: 启动 kube-apiserver、kube-controller-manager、kube-scheduler
  systemd:
    name: "{{ item }}"
    enabled: yes 
    daemon_reload: yes
    state: restarted
  with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: apiserver 健康检查
  uri:
    url: https://127.0.0.1:6443/healthz
    validate_certs: no
    client_cert: "{{ kube_dir }}/pki/ca.crt"
    client_key: "{{ kube_dir }}/pki/ca.key"
  register: apiserver_health_check
  until: apiserver_health_check.status == 200
  retries: 50
  delay: 5

- name: scheduler 健康检查
  uri:
    url: http://127.0.0.1:10251/healthz
  register: scheduler_health_check
  until: scheduler_health_check.status == 200
  retries: 20
  delay: 5

- name: controller-manager 健康检查
  uri:
    url: http://127.0.0.1:10252/healthz
  register: controller_manager_result
  until: controller_manager_result.status == 200
  retries: 20
  delay: 5

- name: 配置 kubectl 命令补全
  shell: "{{ kube_bin_dir }}/kubectl completion bash >/etc/bash_completion.d/kubectl"

- name: 配置 kubectl 命令补全文件权限
  file:
    path: /etc/bash_completion.d/kubectl
    owner: root
    group: root
    mode: 0755
